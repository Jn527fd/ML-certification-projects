# -*- coding: utf-8 -*-
"""predict_health_costs_with_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VIK1hzy-uTKNztxDqdCecmaSqRkIdneC
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

X = dataset.drop('expenses', axis=1)
y = dataset['expenses']

X_encoded = pd.get_dummies(X, columns=['sex', 'smoker', 'region'], drop_first=True)
#print(X_encoded.head())

split_ratio = 0.8
split_index = int(len(X_encoded) * split_ratio)

# Split the dataset into training and testing sets
train_dataset, train_labels = X_encoded.iloc[:split_index], y.iloc[:split_index]
test_dataset, test_labels = X_encoded.iloc[split_index:], y.iloc[split_index:]

# model = keras.Sequential([
#     layers.Dense(1, input_shape=[train_dataset.shape[1]])  # Output layer with 1 neuron for regression
# ])
model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=[train_dataset.shape[1]]),
    layers.Dense(32, activation='relu'),
    layers.Dense(1)  # Output layer with 1 neuron for regression
])

optimizer = keras.optimizers.Adam(learning_rate=0.001)

model.compile(optimizer='adam', loss='mse', metrics=['mae', 'mse'])

trained_history = model.fit(train_dataset, train_labels, epochs=1500, validation_split=0.2, verbose=0)

# RUN THIS CELL TO TEST YOUR MODEL. DO NOT MODIFY CONTENTS.
# Test model by checking how well the model generalizes using the test set.
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

if mae < 3500:
  print("You passed the challenge. Great job!")
else:
  print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions.
test_predictions = model.predict(test_dataset).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims,lims)